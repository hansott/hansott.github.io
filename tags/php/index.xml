<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on Hans Ott</title>
    <link>https://hansott.github.io/tags/php/</link>
    <description>Recent content in PHP on Hans Ott</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 21 Aug 2017 09:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://hansott.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>5 simple rules for simpler code</title>
      <link>https://hansott.github.io/post/5-simple-rules-for-simpler-code/</link>
      <pubDate>Mon, 21 Aug 2017 09:00:00 +0200</pubDate>
      
      <guid>https://hansott.github.io/post/5-simple-rules-for-simpler-code/</guid>
      <description>I wrote a blogpost on our company blog about simple code. Let me know what you think!
 We as developers care about simple code. Simple code makes it easier to read and debug code which will allow you to build new features and fix bugs faster.
https://engagor.github.io/blog/2017/08/21/simple-rules-for-simpler-code/
 </description>
    </item>
    
    <item>
      <title>Building a sliding window rate limiter with Redis</title>
      <link>https://hansott.github.io/post/building-a-sliding-window-rate-limiter-with-redis/</link>
      <pubDate>Fri, 02 Jun 2017 09:00:00 +0200</pubDate>
      
      <guid>https://hansott.github.io/post/building-a-sliding-window-rate-limiter-with-redis/</guid>
      <description>I wrote a blogpost on our company blog about building a sliding rate limiter with Redis. Let me know what you think!
 For our Instagram crawler we needed a system to keep track of the amount of API calls we did to prevent us from hitting the rate limits. We could of course perform our HTTP requests without checking rate limits upfront, and wait until we get a 429 OAuthRateLimitException from Instagram, but that would exhaust our tokens and block us from talking efficiently to their API.</description>
    </item>
    
    <item>
      <title>Programmatically login user with symfony/security in Silex</title>
      <link>https://hansott.github.io/post/programmatically-login-user-with-symfony-security-in-silex/</link>
      <pubDate>Mon, 02 May 2016 20:40:00 +0200</pubDate>
      
      <guid>https://hansott.github.io/post/programmatically-login-user-with-symfony-security-in-silex/</guid>
      <description>Last night I was experimenting with Silex and I needed a register/login form. Silex comes with a SecurityServiceProvider which gives you the power of the symfony/security component. But I couldn&amp;rsquo;t figure out how to programmatically login the user after registration. So here&amp;rsquo;s my solution:
The registration controller:
&amp;lt;?php use Silex\Application; use Symfony\Component\HttpFoundation\Request; final class RegistrationController { // ... public function register(Request $request, Application $app) { $email = $request-&amp;gt;get(&amp;#39;email&amp;#39;); $password = $request-&amp;gt;get(&amp;#39;password&amp;#39;); // validation logic.</description>
    </item>
    
  </channel>
</rss>